@ Alef Documentation @

Storage:

The storage of the contract is stored in Storage.sol

Storage.sol includes:

  > the abstractions to interact with Compound protocol and Erc20 tokens


  CONTRACT VARIABLES:

    address daiContractAddress; //  Dai SmartContract address || 0x6B175474E89094C44Da98b954EedeAC495271d0F ||
    address cDaiContractAddress; //  cDai SmartContract address || 0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643 ||
    address cEthContractAddress; //  eEth SmartContract address || 0x4ddc2d193948926d02f9b1fe9e1daa0718270ed5 ||


    uint256 contractEtherBalance; // Total amount of Ether in contract
    uint256 contractDaiBalance; // Total amount of Dai in contract
    uint256 contractCethBalance; // Total amount of cEther in contract
    uint256 contractCdaiBalance; // Total amount of cDai in contract

    ###
    We want to keep the contract balances updated always. Any kind of token's movement must trigger a change in the (uint256) variables above.
    ###


  STRUCTS:

  > struct Sponsor

    holds sponsor balances (ether, dai, cEther, cDai). any change on those values will trigger a change in the global variables described above.
    holds a boolean status, if true sponsor can operate.


  > struct Student    ?? To be discussed ??

    ??? holds student balance (ether). Not sure if this is even needed - needs to be discussed, technically we can handle everything from the sponsor prospective.
    ??? Can a student have more than one sponsor?
    ??? How many courses can a student have?

    holds a boolean status, if true student can operate.


  > struct Course

    holds a unique bytes32 id.
    holds a owner (the one who register the course).
    holds a boolean status, if true course can operate.



  EVENTS:

  ??? I did not look at them too much yet, they need to be checked



  GETTER AND SETTER METHODS:

  The getter methods for structs data.

  The setter methods for compound and erc20 token addresses. Contract must be paused before setting new address. Only owner!
  ??? If we will set more than one owner, I suggest add a security feature so that the addresses can be changed only if an (x) amount of owners agree. To avoid errors.


#### WHERE DO WE INTERACT WITH COMPOUND ####

Do we want to interact with compound in Alef or using another contract.



####  WHERE TO SAVE INFORMATIONS ####

In order for this to work we will need javascript too.
The way I am proposing the project is that all the informations that need iterations (like arrays) are handled in javascript.
An example can be the bytes32 KEY for Course struct. Instead of saving it in an array in the contract, I would suggest to emit the id once a new Course is created,
and that id is then saved in javascript.

We risk to run out of gas otherwise.



#### SOMETHING TO THINK ABOUT ####

Can we use other libraries, other than SafeMath to perform some kind of simple operations (keeping in mind the libraries limitations).
Maybe when will write changing in user and contract balances we could try to use a library.





#### THE GENERAL IDEA I AM PROPOSING ####


What's the flown I am thinking of:



0) The courses are registered.

1) Students can register and select courses.

2) Sponsors deposit Ether and/or dai.

3) The sponsor selects which course wants to sponsor, in this way he creates a GOAL (an amount to reach == price of the course).

4) The Token deposited (Ether and/or Dai are now invested and sponsor gets C ERC20 token in exchange).

5) Once the investment generates enough profit == price of the course, by PULLING, the sponsor disinvest. Automatically the course is paid and the money credited to the
   course owner. Student got his course. Ivan got his money :)
